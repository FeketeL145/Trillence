// <auto-generated />
using System;
using BackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(TrillenceContext))]
    [Migration("20240212083400_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("BackEnd.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID")
                        .HasComment("Album ID.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("tinytext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasComment("Album name.");

                    b.Property<DateOnly>("Released")
                        .HasColumnType("date")
                        .HasComment("Album release date.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ArtistID")
                        .HasComment("Artist ID.");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "ArtistID")
                        .IsUnique();

                    b.ToTable("albums", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_hungarian_ci");
                });

            modelBuilder.Entity("BackEnd.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID")
                        .HasComment("Genre ID.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasComment("Genre name.");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("genres", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_hungarian_ci");
                });

            modelBuilder.Entity("BackEnd.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID")
                        .HasComment("Playlist ID.")
                        .UseCollation("utf8_hungarian_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<Guid>("Id"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasComment("Name of playlist.")
                        .UseCollation("utf8_hungarian_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserID")
                        .HasComment("User ID.")
                        .UseCollation("utf8_hungarian_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<Guid>("UserId"), "utf8");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .IsUnique();

                    b.ToTable("playlists", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("BackEnd.Models.Playlistsong", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("char(36)")
                        .HasColumnName("SongID")
                        .HasComment("Song ID.");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PlaylistID")
                        .HasComment("Playlist ID.");

                    b.HasKey("SongId", "PlaylistId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PlaylistId" }, "PlaylistID")
                        .IsUnique();

                    b.HasIndex(new[] { "SongId" }, "SongID")
                        .IsUnique();

                    b.ToTable("playlistsong", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_hungarian_ci");
                });

            modelBuilder.Entity("BackEnd.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID")
                        .HasComment("Song ID.");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AlbumID")
                        .HasComment("Album ID.");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GenreID")
                        .HasComment("Genre ID.");

                    b.Property<TimeOnly>("Length")
                        .HasColumnType("time")
                        .HasComment("Song length.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasComment("Song name.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ArtistID")
                        .HasComment("Artist ID.");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AlbumId" }, "AK_songs_AlbumID")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "AK_songs_ArtistID")
                        .IsUnique();

                    b.HasIndex(new[] { "GenreId" }, "AK_songs_GenreID")
                        .IsUnique();

                    b.ToTable("songs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_hungarian_ci");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID")
                        .HasComment("User ID.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasComment("Username.");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_hungarian_ci");
                });

            modelBuilder.Entity("BackEnd.Models.Album", b =>
                {
                    b.HasOne("BackEnd.Models.Song", "IdNavigation")
                        .WithOne("Album")
                        .HasForeignKey("BackEnd.Models.Album", "Id")
                        .HasPrincipalKey("BackEnd.Models.Song", "AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Album ID - Song AlbumID");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.Genre", b =>
                {
                    b.HasOne("BackEnd.Models.Song", "IdNavigation")
                        .WithOne("Genre")
                        .HasForeignKey("BackEnd.Models.Genre", "Id")
                        .HasPrincipalKey("BackEnd.Models.Song", "GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Genre ID - Song GenreID");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.Playlist", b =>
                {
                    b.HasOne("BackEnd.Models.Playlistsong", "IdNavigation")
                        .WithOne("Playlist")
                        .HasForeignKey("BackEnd.Models.Playlist", "Id")
                        .HasPrincipalKey("BackEnd.Models.Playlistsong", "PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Playlist ID - Playlistsong PlaylistID");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.Song", b =>
                {
                    b.HasOne("BackEnd.Models.Playlistsong", "IdNavigation")
                        .WithOne("Song")
                        .HasForeignKey("BackEnd.Models.Song", "Id")
                        .HasPrincipalKey("BackEnd.Models.Playlistsong", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Song ID - Playlistsong SongID");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.HasOne("BackEnd.Models.Album", "IdNavigation")
                        .WithOne("User")
                        .HasForeignKey("BackEnd.Models.User", "Id")
                        .HasPrincipalKey("BackEnd.Models.Album", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User ID - Album ArtistID");

                    b.HasOne("BackEnd.Models.Playlist", "Id2")
                        .WithOne("User")
                        .HasForeignKey("BackEnd.Models.User", "Id")
                        .HasPrincipalKey("BackEnd.Models.Playlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User ID - Playlist UserID");

                    b.HasOne("BackEnd.Models.Song", "Id1")
                        .WithOne("User")
                        .HasForeignKey("BackEnd.Models.User", "Id")
                        .HasPrincipalKey("BackEnd.Models.Song", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User ID - Song ArtistID");

                    b.Navigation("Id1");

                    b.Navigation("Id2");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.Album", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.Playlist", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.Playlistsong", b =>
                {
                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BackEnd.Models.Song", b =>
                {
                    b.Navigation("Album");

                    b.Navigation("Genre");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
