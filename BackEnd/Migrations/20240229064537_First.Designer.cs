// <auto-generated />
using System;
using BackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(TrillenceContext))]
    [Migration("20240229064537_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("BackEnd.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Image")
                        .HasColumnType("tinytext");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.Property<uint?>("Released")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ArtistAlbum", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AlbumID");

                    b.HasKey("ArtistId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AlbumId" }, "AlbumID");

                    b.HasIndex(new[] { "ArtistId" }, "ArtistID");

                    b.ToTable("artist-album", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ArtistSong", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("SongId")
                        .HasColumnType("char(36)")
                        .HasColumnName("SongID");

                    b.HasKey("ArtistId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtistId" }, "ArtistID")
                        .HasDatabaseName("ArtistID1");

                    b.HasIndex(new[] { "SongId" }, "SongID");

                    b.ToTable("artist-song", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.ToTable("playlists", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.PlaylistSong", b =>
                {
                    b.Property<Guid>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("SongID");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PlaylistID");

                    b.HasKey("SongId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlaylistId" }, "PlaylistID");

                    b.HasIndex(new[] { "SongId" }, "SongID")
                        .HasDatabaseName("SongID1");

                    b.ToTable("playlist-song", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AlbumID");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("tinytext");

                    b.Property<TimeSpan?>("Length")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ArtistAlbum", b =>
                {
                    b.HasOne("BackEnd.Models.Album", "Album")
                        .WithMany("ArtistAlbums")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("artist-album_ibfk_1");

                    b.HasOne("BackEnd.Models.Artist", "Artist")
                        .WithOne("ArtistAlbum")
                        .HasForeignKey("BackEnd.Models.ArtistAlbum", "ArtistId")
                        .IsRequired()
                        .HasConstraintName("artist-album_ibfk_2");

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("BackEnd.Models.ArtistSong", b =>
                {
                    b.HasOne("BackEnd.Models.Artist", "Artist")
                        .WithOne("ArtistSong")
                        .HasForeignKey("BackEnd.Models.ArtistSong", "ArtistId")
                        .IsRequired()
                        .HasConstraintName("artist-song_ibfk_1");

                    b.HasOne("BackEnd.Models.Song", "Song")
                        .WithMany("ArtistSongs")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("artist-song_ibfk_2");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BackEnd.Models.Playlist", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("playlists_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.PlaylistSong", b =>
                {
                    b.HasOne("BackEnd.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .IsRequired()
                        .HasConstraintName("playlist-song_ibfk_1");

                    b.HasOne("BackEnd.Models.Song", "Song")
                        .WithOne("PlaylistSong")
                        .HasForeignKey("BackEnd.Models.PlaylistSong", "SongId")
                        .IsRequired()
                        .HasConstraintName("playlist-song_ibfk_2");

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BackEnd.Models.Album", b =>
                {
                    b.Navigation("ArtistAlbums");
                });

            modelBuilder.Entity("BackEnd.Models.Artist", b =>
                {
                    b.Navigation("ArtistAlbum");

                    b.Navigation("ArtistSong");
                });

            modelBuilder.Entity("BackEnd.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("BackEnd.Models.Song", b =>
                {
                    b.Navigation("ArtistSongs");

                    b.Navigation("PlaylistSong");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
